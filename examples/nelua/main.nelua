-- require "allocators.gc"
-- gc:init(nilptr)
require "support"

local Uniforms = @record{
  position: [3]float32,
  pad: byte,
}
local uniforms: Uniforms
local uniformBuffer = taca_gpu_uniformBufferCreate(#Uniforms)

local vertexData: []float32 = {
  -1, -1,
  1, -1,
  -1, 1,
  1, -1,
  1, 1,
  -1, 1,
}
local vertexAttributes: []WGPUVertexAttribute = {
  {
    format = WGPUVertexFormat.Float32x2,
    offset = 0,
    shaderLocation = 0,
  },
}
local vertexBufferLayout: WGPUVertexBufferLayout = {
  arrayStride = 2 * #float32,
  stepMode = WGPUVertexStepMode.Vertex,
  attributeCount = #vertexAttributes,
  attributes = &vertexAttributes,
}

local wgsl = #[
  -- readAll("shader.opt.wgsl") ..
  readAll("shader.wgsl") ..
  readAll("noise.wgsl") ..
  ""
]#;

local shader = taca_gpu_shaderCreate(wgsl)
local vertexBuffer = taca_gpu_vertexBufferCreate(
  #vertexData * #float32, &vertexData, &vertexBufferLayout
)
taca_windowListen(nilptr, nilptr)

local State = @record{
  velocity: [3]float32,
}
local state: State

local function control()
  local event = taca_keyEvent()
  local speed = event.pressed and 10.0 or 0.0
  switch event.code do
    case taca_KeyCode.Left then state.velocity[0] = -speed
    case taca_KeyCode.Right then state.velocity[0] = speed
    case taca_KeyCode.Up then state.velocity[1] = -speed
    case taca_KeyCode.Down then state.velocity[1] = speed
  end
end

local function update()
  for i = 0,<3 do
    uniforms.position[i] = uniforms.position[i] + state.velocity[i]
  end
  taca_gpu_bufferWrite(uniformBuffer, &uniforms)
  taca_gpu_draw(vertexBuffer)
  taca_gpu_present()
end

local function windowListen(
  eventType: taca_WindowEventType,
  userdata: pointer
)
  <cexport, codename "windowListen">
  switch eventType do
    case taca_WindowEventType.Key then control()
    case taca_WindowEventType.Redraw then update()
  end
  -- Comment from code in wasm4:
  -- We must always manually call garbage collection in the end of every frame.
  -- This is the only safe point to do so, because in WASM we cannot scan the function stack.
  -- gc:step()
end
