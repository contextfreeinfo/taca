-- Support first!
local support = require "support"

-- Others.
local r = require "resources"
local s = require "string"
local t = require "taca"

local function print_frames(name: string, frames: span(r.Rect))
  t.print(name)
  for i, frame in ipairs(frames) do
    t.print(s.format(
      "frame %i: %d %d %d %d",
      i,
      frame.pos[0], frame.pos[1],
      frame.size[0], frame.size[1]
    ))
  end
end

local TextureBindings = @record{
  bindings: t.Bindings,
  texture: t.Texture,
}

local Game = @record{
  gem_bindings: TextureBindings,
  player_bindings: TextureBindings,
  tiles_bindings: TextureBindings,
}

local game: Game

local function start()
  <cexport, codename "start">
  local gc <close> = support.GcStep{}
  -- For kicks, use an example of wasi printing.
  print "Hi from Nelua!"
  print_frames("gem shine", r.gem.shine)
  print_frames("player run", r.player.run)
  t.shader_new(r.shader)
  t.pipeline_new({
    vertex_buffers = {
      {},
      {first_attribute = 1, step = t.Step.Instance},
    },
  })
  game = {
    gem_bindings = {texture = t.image_decode(r.gem.image)},
    player_bindings = {texture = t.image_decode(r.player.image)},
    tiles_bindings = {texture = t.image_decode(r.tiles)},
  }
end

local function finish_init()
  t.print("images loaded")
  local function make_bindings(bindings: TextureBindings)
    bindings.bindings = t.bindings_new({textures = {bindings.texture}})
  end
  make_bindings(game.gem_bindings)
  make_bindings(game.player_bindings)
  make_bindings(game.tiles_bindings)
end

local function update(event: t.EventKind)
  <cexport, codename "update">
  local gc <close> = support.GcStep{}
  switch event do
  case t.EventKind.TasksDone then
    finish_init()
  end
end
