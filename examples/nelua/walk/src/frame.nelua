local frame = @record{}

local c = require "./common.nelua"
local d = require "./draw.nelua"
local r = require "./resources.nelua"
local s = require "string"
local t = require "taca"

function frame.update(game: *c.Game)
  -- Window
  local window = t.window_state();
  local viewport_aspect = r.viewport_size[0] / r.viewport_size[1]
  local window_aspect = window.size[0] / window.size[1]
  local aspect = window_aspect / viewport_aspect
  -- t.print(s.format("aspect: %f", aspect))
  -- Uniform and clip
  if aspect > 1 then
    -- Fill height. TODO Adjust aspect for integer scaling.
    local size_x = window.size[0] / aspect
    local x = (window.size[0] - size_x) * 0.5
    t.clip(x, 0, size_x, window.size[1])
    game.uniforms.aspect = {1 / aspect, 1}
  else
    -- Fill width. TODO Adjust aspect for integer scaling.
    local size_y = window.size[1] * aspect
    local y = (window.size[1] - size_y) * 0.5
    t.clip(0, y, window.size[0], size_y)
    game.uniforms.aspect = {1, aspect}
  end
  t.buffer_update(
    game.uniforms_buffer,
    {data = (@pointer(byte))(&game.uniforms), size = #c.Uniforms},
    0
  )
  -- Draw
  local back_source: d.Rect = {
    pos = {0, 0},
    size = {game.back.size[0], game.back.size[1]},
  }
  game.blitter:blit({
    texture = game.back,
    blits = {
      {
        source_rect = back_source,
        view_pos = {r.back_offset[0] - game.back.size[0], r.back_offset[1]},
      },
      {
        source_rect = back_source,
        view_pos = {r.back_offset[0], r.back_offset[1]},
      },
      {
        source_rect = back_source,
        view_pos = {r.back_offset[0] + game.back.size[0], r.back_offset[1]},
      },
    }
  })
  local middle_source: d.Rect = {
    pos = {0, 0},
    size = {game.middle.size[0], game.middle.size[1]},
  }
  game.blitter:blit({
    texture = game.middle,
    blits = {
      {
        source_rect = middle_source,
        view_pos = {
          r.middle_offset[0] - game.middle.size[0],
          r.middle_offset[1],
        },
      },
      {
        source_rect = middle_source,
        view_pos = {r.middle_offset[0], r.middle_offset[1]},
      },
      {
        source_rect = middle_source,
        view_pos = {
          r.middle_offset[0] + game.middle.size[0],
          r.middle_offset[1],
        },
      },
    },
  })
  game.blitter:blit({texture = game.tiles, blits = game.tile_map})
end

return frame
