local pub = @record{}

-- Opaques

-- TODO Change to numbers so we know they aren't unique across types?
local pub.Bindings = @pointer
local pub.Buffer = @pointer
local pub.Pipeline = @pointer
local pub.Sampler = @pointer
local pub.Shader = @pointer
local pub.Texture = @pointer

-- Enums

local pub.EventKind = @enum(uint32){
  Frame = 0,
  Key,
  TasksDone,
}

local pub.Key = @enum(uint32){
  None = 0,
  ArrowUp,
  ArrowDown,
  ArrowLeft,
  ArrowRight,
  Space,
  Escape,
}

local pub.Step = @enum(uint32){
  Vertex = 0,
  Instance,
}

local pub.TextAlignX = @enum(uint32){
    Left = 0,
    Center,
    Right,
}

local pub.TextAlignY = @enum(uint32){
    Baseline = 0,
    Top,
    Middle,
    Bottom,
}

-- Records

local pub.AttributeInfo = @record{
  shader_location: usize,
  value_offset: usize,
}

local pub.BindingsInfo = @record{
  pipeline: pub.Pipeline,
  group_index: usize,
  buffers: span(pub.Buffer),
  samplers: span(pub.Sampler),
  textures: span(pub.Texture),
}

local pub.BufferKind = @enum(uint32) {
  Vertex = 0,
  Index,
  Uniform,
}

local pub.Buffers = @record{
  vertex_buffers: span(pub.Buffer),
  index_buffer: pub.Buffer,
}

local pub.KeyEvent = @record{
  pressed: boolean,
  key: pub.Key,
  modifiers: uint32,
}

local pub.BufferInfo = @record{
  first_attribute: usize,
  step: pub.Step,
  stride: usize,
}

local pub.PipelineShaderInfo = @record{
  entry: string,
  shader: pub.Shader,
}

local pub.PipelineInfo = @record{
    depth_test: boolean,
    fragment: pub.PipelineShaderInfo,
    vertex: pub.PipelineShaderInfo,
    vertex_attributes: span(pub.AttributeInfo),
    vertex_buffers: span(pub.BufferInfo),
}

local pub.TextureInfo = @record{
    size: [2]float32,
}

local pub.WindowState = @record{
    pointer: [2]float32,
    press: uint32,
    size: [2]float32,
}

-- Functions

function pub.bindings_apply(bindings: pub.Bindings): void
  <cimport, cattribute 'import_name("taca_bindings_apply")'>
end

function pub.bindings_new(info: pub.BindingsInfo): pub.Bindings
  <cimport, cattribute 'import_name("taca_bindings_new")'>
end

function pub.buffer_new(kind: pub.BufferKind, bytes: span(byte)): pub.Buffer
  <cimport, cattribute 'import_name("taca_buffer_new")'>
end

function pub.buffer_update(
  buffer: pub.Buffer,
  bytes: span(byte),
  buffer_offset: usize
): void
  <cimport, cattribute 'import_name("taca_buffer_update")'>
end

function pub.buffers_apply(buffers: pub.Buffers): void
  <cimport, cattribute 'import_name("taca_buffers_apply")'>
end

function pub.clip(
  x: float32,
  y: float32,
  size_x: float32,
  size_y: float32
): void
  <cimport, cattribute 'import_name("taca_clip")'>
end

function pub.draw(
  index_begin: uint32,
  index_count: uint32,
  instance_count: uint32
): void
  <cimport, cattribute 'import_name("taca_draw")'>
end

function pub.image_decode(bytes: span(byte)): pub.Texture
  <cimport, cattribute 'import_name("taca_image_decode")'>
end

function pub.key_event(): pub.KeyEvent
  <cimport, cattribute 'import_name("taca_key_event")'>
end

function pub.pipeline_apply(pipeline: pub.Pipeline): void
  <cimport, cattribute 'import_name("taca_pipeline_apply")'>
end

function pub.pipeline_new(info: pub.PipelineInfo): pub.Pipeline
  <cimport, cattribute 'import_name("taca_pipeline_new")'>
end

function pub.print(text: string): void
  <cimport, cattribute 'import_name("taca_print")'>
end

function pub.shader_new(bytes: span(byte)): pub.Shader
  <cimport, cattribute 'import_name("taca_shader_new")'>
end

function pub.text_align(x: pub.TextAlignX, y: pub.TextAlignY): void
  <cimport, cattribute 'import_name("taca_text_align")'>
end

function pub.text_draw(text: string, x: float32, y: float32): void
  <cimport, cattribute 'import_name("taca_text_draw")'>
end

function pub.texture_info(texture: pub.Texture): pub.TextureInfo
  <cimport, cattribute 'import_name("taca_texture_info")'>
end

function pub.title_update(texture: string): void
  <cimport, cattribute 'import_name("taca_title_update")'>
end

function pub.window_state(): pub.WindowState
  <cimport, cattribute 'import_name("taca_window_state")'>
end

return pub;
