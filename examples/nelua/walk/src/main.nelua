-- Support first!
local support = require "support"
local c = require "./control.nelua"
local d = require "./draw.nelua"
local f = require "./frame.nelua"
local g = require "./game.nelua"
local r = require "./resources.nelua"
local s = require "string"
local t = require "taca"
local ti = require "./tiles.nelua"
local u = require "./util.nelua"

-- Content.
local game: g.Game
local max_instances = 1000

local function start()
  <cexport, codename "start">
  local gc <close> = support.GcStep{}
  -- For kicks, use an example of wasi printing.
  print "Hi from Nelua!"
  -- d.print_frames("gem shine", r.gem.shine)
  -- d.print_frames("player run", r.player.run)
  t.shader_new(r.shader)
  t.pipeline_new({
    vertex_buffers = {
      {},
      {first_attribute = 1, step = t.Step.Instance},
    },
  })
  local box_instance = t.buffer_new(
    t.BufferKind.Vertex,
    {data = nilptr, size = max_instances * #d.Instance}
  )
  local function make_instance_buffer(max_instances: usize)
    return t.buffer_new(
      t.BufferKind.Vertex,
      {data = nilptr, size = max_instances * #d.Instance}
    )
  end
  game = {
    back = {
      instance_buffer = make_instance_buffer(10),
      texture = t.image_decode(r.back),
    },
    blitter = {
      index_buffer = t.buffer_new(
        t.BufferKind.Index,
        u.as_bytes((@span(@uint16)){0, 1, 2, 1, 3, 2})
      ),
      vertex_buffer = t.buffer_new(
        t.BufferKind.Vertex,
        u.as_bytes((@span(@[2]float32)){
          {-0.5, -0.5}, {-0.5, 0.5}, {0.5, -0.5}, {0.5, 0.5},
        })
      ),
      view_size = {r.viewport_size[0], r.viewport_size[1]},
    },
    gem = {
      instance_buffer = make_instance_buffer(100),
      texture = t.image_decode(r.gem.image),
    },
    middle = {
      instance_buffer = make_instance_buffer(10),
      texture = t.image_decode(r.middle),
    },
    player = {
      instance_buffer = make_instance_buffer(1),
      texture = t.image_decode(r.player.image),
    },
    player_dir = 1,
    player_pos = r.player.start,
    tile_map = ti.decode(r.tile_map),
    tiles = {
      instance_buffer = make_instance_buffer(max_instances),
      texture = t.image_decode(r.tiles),
    },
    uniforms_buffer = t.buffer_new(
      t.BufferKind.Uniform,
      {data = nilptr, size = #g.Uniforms}
    ),
  }
  game.blitter.instances:reserve(max_instances)
end

local function finish_init()
  -- t.print("images loaded")
  local function make_bindings(bindings: *d.TextureBindings)
    bindings.bindings = t.bindings_new({
      buffers = {game.uniforms_buffer},
      textures = {bindings.texture},
    })
    local info = t.texture_info(bindings.texture)
    bindings.size[0] = info.size[0]
    bindings.size[1] = info.size[1]
  end
  make_bindings(game.back)
  make_bindings(game.gem)
  make_bindings(game.middle)
  make_bindings(game.player)
  make_bindings(game.tiles)
  game.init_finished = true
end

local function update(event: t.EventKind)
  <cexport, codename "update">
  local gc <close> = support.GcStep{}
  switch event do
  case t.EventKind.Frame then
    if game.init_finished then
      f.update(game)
    end
  case t.EventKind.Key then
    if game.init_finished then
      c.update_key(game)
    end
  case t.EventKind.TasksDone then
    finish_init()
  end
end
